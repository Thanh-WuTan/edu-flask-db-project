---
title: COMP3030 - Final Summary Report
authors:
  - name: Vu Ai Thanh
  - name: Truong Gia Bao
  - name: Nguyen Tuan Anh
table-of-contents: true
number-sections: true
toc-depth: 2
toc-expand: true
crossref:
  chapters: true
date: today 
date-format: DD-MM-YYYY
format:
  pdf: 
    documentclass: article
    include-in-header: 
      text: |
        \usepackage{fvextra}
        \DefineVerbatimEnvironment{Highlighting}{Verbatim}{
          commandchars=\\\{\},
          breaklines, breaknonspaceingroup, breakanywhere
        }
tbl-cap-location: bottom
code-overflow: wrap
# bibliography: references.bib
geometry: 
  - inner=3cm
  - outer=4cm
  - top=3cm
  - bottom=4cm
  - headsep=22pt
  - headheight=11pt
  - footskip=33pt
  - ignorehead
  - ignorefoot
  - heightrounded
---

# Conceptual & Physical Design 

The project is aimed to provide a yet minimal but still functional of a management application for a education institution. The main actors that interacts to the app contains: `Administrators`, `Instructors`, and `Students`. There activities will go around the `Courses` at school. 

## Functional and Non-functional Designs 

### Functional 

#### User Authentication and Authorization: 

+ The system must allow users (students, instructors, and admins) to log in using email and password credentials.
+ Users must be assigned roles (student, instructor, admin) with role-specific access to features (e.g., students can enroll/unenroll, instructors can view/manage courses, admins can manage users and courses).

#### Course Management

+ The system must display a list of courses with filters by course name, department, and schedule, supporting pagination (10 courses per page).
+ Users can view detailed course information (e.g., ID, name, department, instructor, location, schedule, semester, availability) on a course detail page.
+ Instructors and admins can add, edit, and delete courses, while students can only view course details.
+ The system must track and display enrolled students for each course.

#### Enrollment Management:

+ Students must be able to enroll in a course if availability is greater than zero and they are not already enrolled, with a confirmation dialog before submission.
+ Students must be able to unenroll from a course if they are enrolled, with a confirmation dialog before submission.  
+ The system must update course availability automatically when students enroll or unenroll.
+ The system must prevent enrollment if the course is full ($\text{availability} \leq 0$) or if the student is already enrolled.

#### User Interface and Navigation:

+ The system must provide a responsive web interface using Bootstrap for consistent styling across devices.
+ Each role (student, instructor, admin) must have a dedicated dashboard with role-specific options.
+ Flash messages must be displayed to provide feedback on actions (e.g., success or error messages for login, enrollment).


#### Analytics 

+ For management roles like `Administrators` they will have access to several dashboards to report about the courses at the institution  . 


### Non-functional 

+ **Performance**: 
  + Having high uptime, with all errors are being handled to prevent crashes. 
  + Queries should execute within a reasonable time, with minimal complexity. Current target is 0.5 seconds for a dataset of 1000 enrollments. 
+ **Security**:
  + Passwords are encrypted when being stored in the database, with supports of password hashing function `bcrypt`. 
  + Access control systems based on roles are designed properly, prevent unauthorized information access or disclosure. 
  + Preventions or mitigations of common web security vulnerabilities as well as applications using SQL database system: SQL Injection, Cross-site Scripting, etc. 
+ **Scalability**: 
  + The application is scalable with increasing numbers of users in an acceptable level, against around 300 users under peak time. 
+ **Usability**: 
  + Provide easy-to-navigate interface, with responsive User Interface with `Bootstrap` library.
+ **Reliability**:
  + Ensure data integrity with normalized database design (3NF) and constraints.

## Entity-Relationship Diagram

![Entity-Relationship Diagram of the project](./images/er.png){width="70%"}

## Proof of Normalization Form

### First Normal Form (1NF):

+ All tables have primary keys
+ All attributes are atomic
+ No repeating groups

### Second Normal Form (2NF):

+ All non-key attributes are fully functionally dependent on their primary keys
+ No partial dependencies exist

### Third Normal Form (3NF):

+ No transitive dependencies
+ Proper use of foreign keys for references
+ Related data is properly normalized into separate tables

# Implement of DB Entities

## Database schema

The full script is in our GitHub repository at this [link](https://github.com/Thanh-WuTan/edu-flask-db-project/blob/main/schema.sql).

## Views

Currently, there is one view `view_course_details` in the database. It provides a simplified and denormalized view of course information with instructor details. This view joins `courses` and `users` tables to provide course information along with the instructor's name, making it easier to retrieve complete course information without writing complex joins in application queries. 

```sql
CREATE VIEW view_course_details AS
SELECT 
    c.id AS course_id,
    c.course_name,
    c.department_id,
    c.instructor_id,
    u.username AS instructor_name,
    c.location,
    c.schedule,
    c.semester,
    c.availability
FROM 
    courses c
    LEFT JOIN users u ON c.instructor_id = u.id;
```

## Stored Procedures

There are 04 stored procedures within the database, which are used as quick refrence for most used queries within the lifecycle of the application: 

| Stored Procedures                 | Purposes                                                                                                             |
| --------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
| `get_user_role_counts()`          | Collect number of users across roles within the databases, adaptive with future new roles.                           |
| `get_course_department_counts()`  | Collect number of courses across departments, adaptive with future new departments & courses in the institute.       |
| `get_student_department_counts()` | Collect number of students across departments, adaptive with future new departments, or changing numbers of students |
| `get_course_count_by_semester()` | Filtering number of courses in each semesters | 

: Stored Procedures used in the application {tbl-colwidths="[40, 60]"}

## Triggers

In the functionalities of the application, there are features that automatically update available slots in each course after enrollment. To efficiently operate this feature, we introduced two triggers:

+ `before_enrollment_insert()`: This trigger is used to check if there are enough seats left in the course. Whenever a student registered a course, this trigger will reduce the available slots by one. When there is no seat available, it will raise an exception for the business logic to know and handle. 
+ `after_enrollment_delete()`: In several cases, student may want to drop the course. This trigger simply increase one seat for the course whenever a student unenroll it. 

Due to the atomic nature of a trigger in MySQL, there are no race condition error within the the app lifecycle, within the scope of the database itself. 

# Performance Tuning

From our default schema, by design of MySQL, several indexes are automatically created (based on `UNIQUE` keyword, or using `INTEGER`). 

![Default indexes in the database](./images/default_indexes.png){height="50%"}

Without any new indexes, normal operations in the database is very fast. For example, the query for a user in the database by email 

![Performance of email matching to user](./images/email_filter.png)

## Problem with filter

In the application, there is a function to allow users to filter courses based on its schedule. Due to schedule could be any combination of dates within a day, the query could be very slow as there is no current index on `dates`.

![Filtering function of the course search](./images/filter.png){width="50%"}

For example, this query on dates required traversal of all 200 courses in our test database, with no potential keys are used. 

![Sample date query](./images/sample_date_before.png)

## Selecting over partitions/indexes 

To minimize the overhead and complexities of adding more columns, we selected to add an index on table `courses`, over the field `schedule`. 

```sql
CREATE INDEX idx_courses_schedule ON courses(schedule);
```

### Failed attempts

1. At first, we tried to used hash partitions, by introducing an user defined function to map the schedule as a bitmask for hashing. However, MySQL do not support custom hash functions. 
2. We also tried to use list partitions on the string (as there are only 32 combinations of sorted calendar). However, we found out that the InnoDB engine of MySQL do not support partitions for tables that contains foreign keys. 

### Performance after tuning

![Performance after adding the index](./images/sample_date_new.png)

With the introduction of this new index, the query performance boost significantly. For example, the database now only needs to filter 19 rows, which are also shared the date is "M". The reason behind this behavior is that, the index introduced created a hash map from newly created `schedule` value. However, compared to represent the schedule as a bitmask, this is slightly slower; but required a much smaller complexity. 

# Security Configuration 

## Access Control & Authorization

+ The system allow users (students, instructors, and admins) to log in using email and password credentials.
+ Users must be assigned roles (student, instructor, admin) with role-specific access to features (e.g., students can enroll/unenroll, instructors can view/manage courses, admins can manage users and courses).
+ Code References:
  + \texttt{\href{https://github.com/Thanh-WuTan/edu-flask-db-project/blob/main/app/service/auth_service.py}{auth\_service.py}}: Handles registration, password validation, login, and password hashing.
  + \texttt{\href{https://github.com/Thanh-WuTan/edu-flask-db-project/blob/main/app/role_required.py}{role\_required.py}}: Defines a decorator to restrict route access based on user roles.
  
## Password Storage

+ For user password, we are not using native functions in SQL. There are two main reasons: 

### Lack of custom hash functions 

MySQL only offers plain cryptographic hash functions, and a lot of them are deprecated like MD5 or SHA1. Also, it only supports AES-256 for symmetric encryption, but it is not are in the scope of our usage for password storage (else, we need to introduce mechanism for user's secret key)

### Lack of salt before hashing

For plain usage of cryptographic hash function, user's password is still at risk of rainbow search attack, which attackers attempts to brute-force for the password (for matching hash), or looking up in public database. 

+ Therefore, passwords in the database are encrypted when being stored in the database, with supports of password hashing function `bcrypt`, which provides the mechanism for a easy to implement password hashing scheme. 

## Prevent SQL injection 
A crucial component of the application is making sure that database interactions are secure. All functions that communicate with the database are grouped under the \href{https://github.com/Thanh-WuTan/edu-flask-db-project/tree/main/app/db}{app/db/} directory in order to prevent SQL injection attacks. These functions are implemented to only run SQL queries that are parameterized, which significantly reduces the possibility of malicious SQL code injection. By separating SQL code from user input and guaranteeing that input data is handled as data rather than executable code, parameterized queries improve the system's overall security posture.

```python
cursor.execute("SELECT id FROM roles WHERE role_name = %s", (role_name,))
role_id = cursor.fetchone()[0]
cursor.execute(
  "INSERT INTO users (email, username, password, role, phone, department_id) VALUES (%s, %s, %s, %s, %s, %s)",
  (email, username, password, role_id, phone, department_id)
)
```

## End-to-End Testing & Web Integration

Due to the scope of this project, we conducted **manual end-to-end testing** to verify the system's functionality by inspecting both the user interface and the underlying database.

### Insert Sample Data

Sample data was injected into the system using the following commands:

```
docker cp test.py edu-flask-db-project_web_1:/tmp/test.py
Mac/Linux: docker exec -it edu-flask-db-project_web_1 python3 /tmp/test.py
Windows: docker exec -it edu-flask-db-project_web_1 python /tmp/test.py
```

![](./images/testing_img/Pasted%20image%2020250525172759.png)

### Registration

All registered accounts are initially assigned the role of "guest." Only administrators have the authority to assign roles such as "student" or "instructor."

![](./images/testing_img/Pasted%20image%2020250525174300.png)

An error message is displayed to enforce strong password requirements.

![](./images/testing_img/Pasted%20image%2020250525174329.png)

This was the result of testing with the password `Database#2025`.

![](./images/testing_img/Pasted%20image%2020250525180724.png)

The corresponding record in the database, showing the password is securely hashed using `bcrypt`:

```cmd
mysql> SELECT u.*, r.role_name FROM users u JOIN roles r ON u.role = r.id WHERE u.email = "test_register@gmail.com";
+------+---------------+--------------------------------------------------------------+------+-------+-------------------------+---------------+---------------------+-----------+
| id   | username      | password                                                     | role | phone | email                   | department_id | created_at          | role_name |
+------+---------------+--------------------------------------------------------------+------+-------+-------------------------+---------------+---------------------+-----------+
| 3202 | test_register | $2b$12$ar.ffzBCzJ9s.xXFXReooOZahTzEEPDpV6EOr0QBebndDKwLnre7. |    4 | NULL  | test_register@gmail.com |             5 | 2025-05-25 11:06:39 | guest     |
+------+---------------+--------------------------------------------------------------+------+-------+-------------------------+---------------+---------------------+-----------+
1 row in set (0.00 sec)
```

### Login

#### As Admin

The administrator account is predefined in the source code and can be customized freely. Below is the admin dashboard upon successful login:

![](./images/testing_img/Pasted%20image%2020250525181647.png)
![](./images/testing_img/Pasted%20image%2020250525181704.png)
![](./images/testing_img/Pasted%20image%2020250525181718.png)

#### As Student

Students can view all available courses and manage their enrollments.

![](./images/testing_img/Pasted%20image%2020250525182459.png)

#### As Instructor

Instructors have access to view and manage only the courses they are responsible for.

![](./images/testing_img/Pasted%20image%2020250525182700.png)

#### As Guest

Guests do not have access to core functionalities until their role is upgraded.

![](./images/testing_img/Pasted%20image%2020250525180755.png)

### Admin Functions

#### Manage Courses

##### Add Course

![](./images/testing_img/Pasted%20image%2020250525182916.png)
![](./images/testing_img/Pasted%20image%2020250525182929.png)

Validation is applied to ensure all fields follow correct format. Confirmation can be verified through both UI and database:

![](./images/testing_img/Pasted%20image%2020250525183048.png)

```sql
mysql> SELECT * FROM courses WHERE course_name = 'Test_Adding_course';
+-----+--------------------+---------------+---------------+----------+----------+-----------+--------------+
| id  | course_name        | department_id | instructor_id | location | schedule | semester  | availability |
+-----+--------------------+---------------+---------------+----------+----------+-----------+--------------+
| 201 | Test_Adding_Course |             1 |             2 | C405     | M        | Fall 2025 |          100 |
+-----+--------------------+---------------+---------------+----------+----------+-----------+--------------+
1 row in set (0.00 sec)
```

##### Delete Course

![](./images/testing_img/Pasted%20image%2020250525183746.png)
![](./images/testing_img/Pasted%20image%2020250525183825.png)

Record removal is confirmed through the following result:

![](./images/testing_img/Pasted%20image%2020250525183825.png)

```sql
mysql> SELECT * FROM courses WHERE course_name = 'Test_Adding_course';
Empty set (0.00 sec)
```

##### Add Students to Course

Students can be assigned or removed from a course by selecting the course from the list:

![](./images/testing_img/Pasted%20image%2020250525184445.png)
![](./images/testing_img/Pasted%20image%2020250525184339.png)
![](./images/testing_img/Pasted%20image%2020250525184536.png)

```sql
SELECT u.id AS student_id, u.username, u.email, d.department_name
FROM enrollments e
JOIN users u ON e.student_id = u.id
JOIN courses c ON e.course_id = c.id
JOIN departments d ON u.department_id = d.id
WHERE c.course_name = 'test_add_student_instructor';
```

##### Remove Students from Course

![](./images/testing_img/Pasted%20image%2020250525184824.png)
![](./images/testing_img/Pasted%20image%2020250525184837.png)

```sql
mysql> SELECT u.id AS student_id, u.username, u.email, d.department_name
    -> FROM enrollments e
    -> JOIN users u ON e.student_id = u.id
    -> JOIN courses c ON e.course_id = c.id
    -> JOIN departments d ON u.department_id = d.id
    -> WHERE c.course_name = 'test_add_student_instructor';
Empty set (0.02 sec)
```

#### Manage Users

##### Set Instructor Role

![](./images/testing_img/Pasted%20image%2020250525182116.png)
![](./images/testing_img/Pasted%20image%2020250525182141.png)
![](./images/testing_img/Pasted%20image%2020250525182229.png)

##### Set Student Role

![](./images/testing_img/Pasted%20image%2020250525182336.png)
![](./images/testing_img/Pasted%20image%2020250525182422.png)

### Student Functions

Students are able to view their current enrollments.

![](./images/testing_img/Pasted%20image%2020250525192319.png)

#### Enroll in Courses

##### Non-Full Course

![](./images/testing_img/Pasted%20image%2020250525190508.png)
![](./images/testing_img/Pasted%20image%2020250525190540.png)
![](./images/testing_img/Pasted%20image%2020250525191714.png)

```sql
mysql> SELECT e.*
    -> FROM enrollments e
    -> JOIN users u ON e.student_id = u.id
    -> JOIN courses c ON e.course_id = c.id
    -> WHERE u.username = 'test_enroll_student' AND c.course_name = 'DevOps';
+------+------------+-----------+
| id   | student_id | course_id |
+------+------------+-----------+
| 9499 |       3203 |         1 |
+------+------------+-----------+
1 row in set (0.00 sec)
```

##### Full Course

![](./images/testing_img/Pasted%20image%2020250525192248.png)

When the course has no remaining availability, the system blocks enrollment.

#### Unenroll from Course

![](./images/testing_img/Pasted%20image%2020250525192100.png)
![](./images/testing_img/Pasted%20image%2020250525192111.png)

```sql
mysql> SELECT e.*
    -> FROM enrollments e
    -> JOIN users u ON e.student_id = u.id
    -> JOIN courses c ON e.course_id = c.id
    -> WHERE u.username = 'test_enroll_student' AND c.course_name = 'DevOps';
Empty set (0.01 sec)
```

### Instructor View

The interface is similar to the administrator but limited to courses assigned to the instructor.

![](./images/testing_img/Pasted%20image%2020250525190213.png)
![](./images/testing_img/Pasted%20image%2020250525190233.png)
![](./images/testing_img/Pasted%20image%2020250525190245.png)

### Course View and Filtering

![](./images/testing_img/Pasted%20image%2020250525173642.png)
![](./images/testing_img/Pasted%20image%2020250525173707.png)

#### Filter by Name

![](./images/testing_img/Pasted%20image%2020250525173813.png)

#### Filter by Department

![](./images/testing_img/Pasted%20image%2020250525173858.png)

#### Filter by Schedule

![](./images/testing_img/Pasted%20image%2020250525173953.png)



# Presentation & Material 

+ [Presentation's slide deck](https://github.com/Thanh-WuTan/edu-flask-db-project/tree/main/documents/Presentation.pdf)
+ [Final report](https://github.com/Thanh-WuTan/edu-flask-db-project/tree/main/documents/FinalReport.pdf)
+ Source code: [https://github.com/Thanh-WuTan/edu-flask-db-project](https://github.com/Thanh-WuTan/edu-flask-db-project)
